{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "oneOf": [
    {
      "type": "object",
      "required": [
        "andr_receive"
      ],
      "properties": {
        "andr_receive": {
          "$ref": "#/definitions/AndromedaMsg"
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "mint"
      ],
      "properties": {
        "mint": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GumballMintMsg"
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "buy"
      ],
      "properties": {
        "buy": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Sets price, max amount per wallet, and recipient",
      "type": "object",
      "required": [
        "set_sale_details"
      ],
      "properties": {
        "set_sale_details": {
          "type": "object",
          "required": [
            "price",
            "recipient"
          ],
          "properties": {
            "max_amount_per_wallet": {
              "description": "The amount of tokens a wallet can purchase, default is 1.",
              "anyOf": [
                {
                  "$ref": "#/definitions/Uint128"
                },
                {
                  "type": "null"
                }
              ]
            },
            "price": {
              "description": "The price per token.",
              "allOf": [
                {
                  "$ref": "#/definitions/Coin"
                }
              ]
            },
            "recipient": {
              "description": "The recipient of the funds.",
              "allOf": [
                {
                  "$ref": "#/definitions/Recipient"
                }
              ]
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Automatically switches to opposite status. True means buying is allowed and minting is halted. False means the opposite.",
      "type": "object",
      "required": [
        "switch_status"
      ],
      "properties": {
        "switch_status": {
          "type": "object"
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "ADORecipient": {
      "description": "ADOs use a default Receive message for handling funds, this struct states that the recipient is an ADO and may attach the data field to the Receive message",
      "type": "object",
      "required": [
        "address"
      ],
      "properties": {
        "address": {
          "description": "Addr can also be a human-readable identifier used in a mission contract.",
          "allOf": [
            {
              "$ref": "#/definitions/AndrAddress"
            }
          ]
        },
        "msg": {
          "anyOf": [
            {
              "$ref": "#/definitions/Binary"
            },
            {
              "type": "null"
            }
          ]
        }
      }
    },
    "AndrAddress": {
      "type": "object",
      "required": [
        "identifier"
      ],
      "properties": {
        "identifier": {
          "description": "Can be either an address or identifier of an ADO in a mission.",
          "type": "string"
        }
      }
    },
    "AndromedaMsg": {
      "oneOf": [
        {
          "description": "Standard Messages",
          "type": "object",
          "required": [
            "receive"
          ],
          "properties": {
            "receive": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Binary"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "update_owner"
          ],
          "properties": {
            "update_owner": {
              "type": "object",
              "required": [
                "address"
              ],
              "properties": {
                "address": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "update_operators"
          ],
          "properties": {
            "update_operators": {
              "type": "object",
              "required": [
                "operators"
              ],
              "properties": {
                "operators": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "update_mission_contract"
          ],
          "properties": {
            "update_mission_contract": {
              "type": "object",
              "required": [
                "address"
              ],
              "properties": {
                "address": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Called after `UpdateMissionContract` to ensure that all `AndrAddress` instances are valid.",
          "type": "object",
          "required": [
            "validate_andr_addresses"
          ],
          "properties": {
            "validate_andr_addresses": {
              "type": "object"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "withdraw"
          ],
          "properties": {
            "withdraw": {
              "type": "object",
              "properties": {
                "recipient": {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/Recipient"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "tokens_to_withdraw": {
                  "type": [
                    "array",
                    "null"
                  ],
                  "items": {
                    "$ref": "#/definitions/Withdrawal"
                  }
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "register_module"
          ],
          "properties": {
            "register_module": {
              "type": "object",
              "required": [
                "module"
              ],
              "properties": {
                "module": {
                  "$ref": "#/definitions/Module"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "deregister_module"
          ],
          "properties": {
            "deregister_module": {
              "type": "object",
              "required": [
                "module_idx"
              ],
              "properties": {
                "module_idx": {
                  "$ref": "#/definitions/Uint64"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "alter_module"
          ],
          "properties": {
            "alter_module": {
              "type": "object",
              "required": [
                "module",
                "module_idx"
              ],
              "properties": {
                "module": {
                  "$ref": "#/definitions/Module"
                },
                "module_idx": {
                  "$ref": "#/definitions/Uint64"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "refresh_address"
          ],
          "properties": {
            "refresh_address": {
              "type": "object",
              "required": [
                "contract"
              ],
              "properties": {
                "contract": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "refresh_addresses"
          ],
          "properties": {
            "refresh_addresses": {
              "type": "object",
              "properties": {
                "limit": {
                  "type": [
                    "integer",
                    "null"
                  ],
                  "format": "uint32",
                  "minimum": 0.0
                },
                "start_after": {
                  "type": [
                    "string",
                    "null"
                  ]
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>",
      "type": "string"
    },
    "Coin": {
      "type": "object",
      "required": [
        "amount",
        "denom"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "denom": {
          "type": "string"
        }
      }
    },
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "GumballMintMsg": {
      "type": "object",
      "required": [
        "extension",
        "token_id"
      ],
      "properties": {
        "extension": {
          "description": "Any custom extension used by this contract",
          "allOf": [
            {
              "$ref": "#/definitions/TokenExtension"
            }
          ]
        },
        "owner": {
          "description": "The owner of the newly minted NFT",
          "type": [
            "string",
            "null"
          ]
        },
        "token_id": {
          "description": "Unique ID of the NFT",
          "type": "string"
        },
        "token_uri": {
          "description": "Universal resource identifier for this NFT Should point to a JSON file that conforms to the ERC721 Metadata JSON Schema",
          "type": [
            "string",
            "null"
          ]
        }
      }
    },
    "MetadataAttribute": {
      "type": "object",
      "required": [
        "key",
        "value"
      ],
      "properties": {
        "display_label": {
          "description": "The string used to display the attribute, if none is provided the `key` field can be used",
          "type": [
            "string",
            "null"
          ]
        },
        "key": {
          "description": "The key for the attribute",
          "type": "string"
        },
        "value": {
          "description": "The value for the attribute",
          "type": "string"
        }
      }
    },
    "MetadataType": {
      "description": "Enum used to define the type of metadata held by a token",
      "type": "string",
      "enum": [
        "image",
        "video",
        "audio",
        "domain",
        "json",
        "other"
      ]
    },
    "Module": {
      "description": "Modules can be instantiated in two different ways New - Provide an instantiation message for the contract, a new contract will be instantiated and the address recorded Address - Provide an address for an already instantiated module contract A struct describing a token module, provided with the instantiation message this struct is used to record the info about the module and how/if it should be instantiated",
      "type": "object",
      "required": [
        "address",
        "is_mutable",
        "module_type"
      ],
      "properties": {
        "address": {
          "$ref": "#/definitions/AndrAddress"
        },
        "is_mutable": {
          "type": "boolean"
        },
        "module_type": {
          "type": "string"
        }
      }
    },
    "PrimitivePointer": {
      "type": "object",
      "required": [
        "address"
      ],
      "properties": {
        "address": {
          "description": "The address of the primitive contract.",
          "allOf": [
            {
              "$ref": "#/definitions/AndrAddress"
            }
          ]
        },
        "key": {
          "description": "The optional key for the stored data.",
          "type": [
            "string",
            "null"
          ]
        }
      }
    },
    "Recipient": {
      "oneOf": [
        {
          "description": "An address that is not another ADO. It is assumed that it is a valid address.",
          "type": "object",
          "required": [
            "addr"
          ],
          "properties": {
            "addr": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "a_d_o"
          ],
          "properties": {
            "a_d_o": {
              "$ref": "#/definitions/ADORecipient"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "TokenExtension": {
      "type": "object",
      "required": [
        "archived",
        "name",
        "publisher"
      ],
      "properties": {
        "archived": {
          "description": "Whether the token is archived or not",
          "type": "boolean"
        },
        "description": {
          "description": "An optional description of the token",
          "type": [
            "string",
            "null"
          ]
        },
        "metadata": {
          "description": "The metadata of the token (if it exists)",
          "anyOf": [
            {
              "$ref": "#/definitions/TokenMetadata"
            },
            {
              "type": "null"
            }
          ]
        },
        "name": {
          "description": "The name of the token",
          "type": "string"
        },
        "publisher": {
          "description": "The original publisher of the token (immutable)",
          "type": "string"
        },
        "transfer_agreement": {
          "description": "The transfer agreement of the token (if it exists)",
          "anyOf": [
            {
              "$ref": "#/definitions/TransferAgreement"
            },
            {
              "type": "null"
            }
          ]
        }
      }
    },
    "TokenMetadata": {
      "type": "object",
      "required": [
        "data_type"
      ],
      "properties": {
        "attributes": {
          "description": "On chain attributes related to the token (basic key/value)",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/MetadataAttribute"
          }
        },
        "data_type": {
          "description": "The metadata type",
          "allOf": [
            {
              "$ref": "#/definitions/MetadataType"
            }
          ]
        },
        "data_url": {
          "description": "A URL to any off-chain data relating to the token, the response from this URL should match the defined `data_type` of the token",
          "type": [
            "string",
            "null"
          ]
        },
        "external_url": {
          "description": "A URL to the token's source",
          "type": [
            "string",
            "null"
          ]
        }
      }
    },
    "TransferAgreement": {
      "description": "A struct used to represent an agreed transfer of a token. The `purchaser` may use the `Transfer` message for this token as long as funds are provided equalling the `amount` defined in the agreement.",
      "type": "object",
      "required": [
        "amount",
        "purchaser"
      ],
      "properties": {
        "amount": {
          "description": "The amount required for the purchaser to transfer ownership of the token",
          "allOf": [
            {
              "$ref": "#/definitions/Value_for_Coin"
            }
          ]
        },
        "purchaser": {
          "description": "The address of the purchaser",
          "type": "string"
        }
      }
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "Uint64": {
      "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
      "type": "string"
    },
    "Value_for_Coin": {
      "oneOf": [
        {
          "description": "The raw value.",
          "type": "object",
          "required": [
            "raw"
          ],
          "properties": {
            "raw": {
              "$ref": "#/definitions/Coin"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "The pointer to the primitive. This SHOULD be of the same underlying type as `T`. For example, if `T` is `String`, then `PrimitivePointer` should point to a Primitive::String(..). This cannot be enforced at compile time though, so it is up to the discretion of the user.",
          "type": "object",
          "required": [
            "pointer"
          ],
          "properties": {
            "pointer": {
              "$ref": "#/definitions/PrimitivePointer"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Withdrawal": {
      "type": "object",
      "required": [
        "token"
      ],
      "properties": {
        "token": {
          "type": "string"
        },
        "withdrawal_type": {
          "anyOf": [
            {
              "$ref": "#/definitions/WithdrawalType"
            },
            {
              "type": "null"
            }
          ]
        }
      }
    },
    "WithdrawalType": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "amount"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "percentage"
          ],
          "properties": {
            "percentage": {
              "$ref": "#/definitions/Decimal"
            }
          },
          "additionalProperties": false
        }
      ]
    }
  }
}

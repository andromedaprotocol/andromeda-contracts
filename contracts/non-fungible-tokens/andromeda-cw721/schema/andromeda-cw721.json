{
  "contract_name": "andromeda-cw721",
  "contract_version": "0.1.1",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "required": [
      "minter",
      "name",
      "symbol"
    ],
    "properties": {
      "minter": {
        "description": "The minter is the only one who can create new NFTs. This is designed for a base NFT that is controlled by an external program or contract. You will likely replace this with custom logic in custom NFTs",
        "allOf": [
          {
            "$ref": "#/definitions/AndrAddress"
          }
        ]
      },
      "modules": {
        "description": "The attached Andromeda modules",
        "type": [
          "array",
          "null"
        ],
        "items": {
          "$ref": "#/definitions/Module"
        }
      },
      "name": {
        "description": "Name of the NFT contract",
        "type": "string"
      },
      "symbol": {
        "description": "Symbol of the NFT contract",
        "type": "string"
      }
    },
    "additionalProperties": false,
    "definitions": {
      "AndrAddress": {
        "type": "object",
        "required": [
          "identifier"
        ],
        "properties": {
          "identifier": {
            "description": "Can be either an address or identifier of an ADO in a app.",
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Module": {
        "description": "A struct describing a token module, provided with the instantiation message this struct is used to record the info about the module and how/if it should be instantiated",
        "type": "object",
        "required": [
          "address",
          "is_mutable",
          "module_type"
        ],
        "properties": {
          "address": {
            "$ref": "#/definitions/AndrAddress"
          },
          "is_mutable": {
            "type": "boolean"
          },
          "module_type": {
            "type": "string"
          }
        },
        "additionalProperties": false
      }
    }
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "andr_receive"
        ],
        "properties": {
          "andr_receive": {
            "$ref": "#/definitions/AndromedaMsg"
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Mints a token",
        "type": "object",
        "required": [
          "mint"
        ],
        "properties": {
          "mint": {
            "$ref": "#/definitions/MintMsg_for_TokenExtension"
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Transfers ownership of a token",
        "type": "object",
        "required": [
          "transfer_nft"
        ],
        "properties": {
          "transfer_nft": {
            "type": "object",
            "required": [
              "recipient",
              "token_id"
            ],
            "properties": {
              "recipient": {
                "type": "string"
              },
              "token_id": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Sends a token to another contract",
        "type": "object",
        "required": [
          "send_nft"
        ],
        "properties": {
          "send_nft": {
            "type": "object",
            "required": [
              "contract",
              "msg",
              "token_id"
            ],
            "properties": {
              "contract": {
                "type": "string"
              },
              "msg": {
                "$ref": "#/definitions/Binary"
              },
              "token_id": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Allows operator to transfer / send the token from the owner's account. If expiration is set, then this allowance has a time/height limit",
        "type": "object",
        "required": [
          "approve"
        ],
        "properties": {
          "approve": {
            "type": "object",
            "required": [
              "spender",
              "token_id"
            ],
            "properties": {
              "expires": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/Expiration"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "spender": {
                "type": "string"
              },
              "token_id": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Remove previously granted Approval",
        "type": "object",
        "required": [
          "revoke"
        ],
        "properties": {
          "revoke": {
            "type": "object",
            "required": [
              "spender",
              "token_id"
            ],
            "properties": {
              "spender": {
                "type": "string"
              },
              "token_id": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Approves an address for all tokens owned by the sender",
        "type": "object",
        "required": [
          "approve_all"
        ],
        "properties": {
          "approve_all": {
            "type": "object",
            "required": [
              "operator"
            ],
            "properties": {
              "expires": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/Expiration"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "operator": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Remove previously granted ApproveAll permission",
        "type": "object",
        "required": [
          "revoke_all"
        ],
        "properties": {
          "revoke_all": {
            "type": "object",
            "required": [
              "operator"
            ],
            "properties": {
              "operator": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Burns a token, removing all data related to it. The ID of the token is still reserved.",
        "type": "object",
        "required": [
          "burn"
        ],
        "properties": {
          "burn": {
            "type": "object",
            "required": [
              "token_id"
            ],
            "properties": {
              "token_id": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Archives a token, causing it to be immutable but readable",
        "type": "object",
        "required": [
          "archive"
        ],
        "properties": {
          "archive": {
            "type": "object",
            "required": [
              "token_id"
            ],
            "properties": {
              "token_id": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Assigns a `TransferAgreement` for a token",
        "type": "object",
        "required": [
          "transfer_agreement"
        ],
        "properties": {
          "transfer_agreement": {
            "type": "object",
            "required": [
              "token_id"
            ],
            "properties": {
              "agreement": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/TransferAgreement"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "token_id": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Mint multiple tokens at a time",
        "type": "object",
        "required": [
          "batch_mint"
        ],
        "properties": {
          "batch_mint": {
            "type": "object",
            "required": [
              "tokens"
            ],
            "properties": {
              "tokens": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/MintMsg_for_TokenExtension"
                }
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "extension"
        ],
        "properties": {
          "extension": {
            "type": "object",
            "required": [
              "msg"
            ],
            "properties": {
              "msg": {
                "$ref": "#/definitions/ExecuteMsg"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "ADORecipient": {
        "description": "ADOs use a default Receive message for handling funds, this struct states that the recipient is an ADO and may attach the data field to the Receive message",
        "type": "object",
        "required": [
          "address"
        ],
        "properties": {
          "address": {
            "description": "Addr can also be a human-readable identifier used in a app contract.",
            "allOf": [
              {
                "$ref": "#/definitions/AndrAddress"
              }
            ]
          },
          "msg": {
            "anyOf": [
              {
                "$ref": "#/definitions/Binary"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "AndrAddress": {
        "type": "object",
        "required": [
          "identifier"
        ],
        "properties": {
          "identifier": {
            "description": "Can be either an address or identifier of an ADO in a app.",
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "AndromedaMsg": {
        "oneOf": [
          {
            "description": "Standard Messages",
            "type": "object",
            "required": [
              "receive"
            ],
            "properties": {
              "receive": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/Binary"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "update_owner"
            ],
            "properties": {
              "update_owner": {
                "type": "object",
                "required": [
                  "address"
                ],
                "properties": {
                  "address": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "update_operators"
            ],
            "properties": {
              "update_operators": {
                "type": "object",
                "required": [
                  "operators"
                ],
                "properties": {
                  "operators": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "update_app_contract"
            ],
            "properties": {
              "update_app_contract": {
                "type": "object",
                "required": [
                  "address"
                ],
                "properties": {
                  "address": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "withdraw"
            ],
            "properties": {
              "withdraw": {
                "type": "object",
                "properties": {
                  "recipient": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/Recipient"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "tokens_to_withdraw": {
                    "type": [
                      "array",
                      "null"
                    ],
                    "items": {
                      "$ref": "#/definitions/Withdrawal"
                    }
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "register_module"
            ],
            "properties": {
              "register_module": {
                "type": "object",
                "required": [
                  "module"
                ],
                "properties": {
                  "module": {
                    "$ref": "#/definitions/Module"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "deregister_module"
            ],
            "properties": {
              "deregister_module": {
                "type": "object",
                "required": [
                  "module_idx"
                ],
                "properties": {
                  "module_idx": {
                    "$ref": "#/definitions/Uint64"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "alter_module"
            ],
            "properties": {
              "alter_module": {
                "type": "object",
                "required": [
                  "module",
                  "module_idx"
                ],
                "properties": {
                  "module": {
                    "$ref": "#/definitions/Module"
                  },
                  "module_idx": {
                    "$ref": "#/definitions/Uint64"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "refresh_address"
            ],
            "properties": {
              "refresh_address": {
                "type": "object",
                "required": [
                  "contract"
                ],
                "properties": {
                  "contract": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "refresh_addresses"
            ],
            "properties": {
              "refresh_addresses": {
                "type": "object",
                "properties": {
                  "limit": {
                    "type": [
                      "integer",
                      "null"
                    ],
                    "format": "uint32",
                    "minimum": 0.0
                  },
                  "start_after": {
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Binary": {
        "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
        "type": "string"
      },
      "Coin": {
        "type": "object",
        "required": [
          "amount",
          "denom"
        ],
        "properties": {
          "amount": {
            "$ref": "#/definitions/Uint128"
          },
          "denom": {
            "type": "string"
          }
        }
      },
      "Decimal": {
        "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
        "type": "string"
      },
      "ExecuteMsg": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "andr_receive"
            ],
            "properties": {
              "andr_receive": {
                "$ref": "#/definitions/AndromedaMsg"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Mints a token",
            "type": "object",
            "required": [
              "mint"
            ],
            "properties": {
              "mint": {
                "$ref": "#/definitions/MintMsg_for_TokenExtension"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Transfers ownership of a token",
            "type": "object",
            "required": [
              "transfer_nft"
            ],
            "properties": {
              "transfer_nft": {
                "type": "object",
                "required": [
                  "recipient",
                  "token_id"
                ],
                "properties": {
                  "recipient": {
                    "type": "string"
                  },
                  "token_id": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Sends a token to another contract",
            "type": "object",
            "required": [
              "send_nft"
            ],
            "properties": {
              "send_nft": {
                "type": "object",
                "required": [
                  "contract",
                  "msg",
                  "token_id"
                ],
                "properties": {
                  "contract": {
                    "type": "string"
                  },
                  "msg": {
                    "$ref": "#/definitions/Binary"
                  },
                  "token_id": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Allows operator to transfer / send the token from the owner's account. If expiration is set, then this allowance has a time/height limit",
            "type": "object",
            "required": [
              "approve"
            ],
            "properties": {
              "approve": {
                "type": "object",
                "required": [
                  "spender",
                  "token_id"
                ],
                "properties": {
                  "expires": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/Expiration"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "spender": {
                    "type": "string"
                  },
                  "token_id": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Remove previously granted Approval",
            "type": "object",
            "required": [
              "revoke"
            ],
            "properties": {
              "revoke": {
                "type": "object",
                "required": [
                  "spender",
                  "token_id"
                ],
                "properties": {
                  "spender": {
                    "type": "string"
                  },
                  "token_id": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Approves an address for all tokens owned by the sender",
            "type": "object",
            "required": [
              "approve_all"
            ],
            "properties": {
              "approve_all": {
                "type": "object",
                "required": [
                  "operator"
                ],
                "properties": {
                  "expires": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/Expiration"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "operator": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Remove previously granted ApproveAll permission",
            "type": "object",
            "required": [
              "revoke_all"
            ],
            "properties": {
              "revoke_all": {
                "type": "object",
                "required": [
                  "operator"
                ],
                "properties": {
                  "operator": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Burns a token, removing all data related to it. The ID of the token is still reserved.",
            "type": "object",
            "required": [
              "burn"
            ],
            "properties": {
              "burn": {
                "type": "object",
                "required": [
                  "token_id"
                ],
                "properties": {
                  "token_id": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Archives a token, causing it to be immutable but readable",
            "type": "object",
            "required": [
              "archive"
            ],
            "properties": {
              "archive": {
                "type": "object",
                "required": [
                  "token_id"
                ],
                "properties": {
                  "token_id": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Assigns a `TransferAgreement` for a token",
            "type": "object",
            "required": [
              "transfer_agreement"
            ],
            "properties": {
              "transfer_agreement": {
                "type": "object",
                "required": [
                  "token_id"
                ],
                "properties": {
                  "agreement": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/TransferAgreement"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "token_id": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Mint multiple tokens at a time",
            "type": "object",
            "required": [
              "batch_mint"
            ],
            "properties": {
              "batch_mint": {
                "type": "object",
                "required": [
                  "tokens"
                ],
                "properties": {
                  "tokens": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/MintMsg_for_TokenExtension"
                    }
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "extension"
            ],
            "properties": {
              "extension": {
                "type": "object",
                "required": [
                  "msg"
                ],
                "properties": {
                  "msg": {
                    "$ref": "#/definitions/ExecuteMsg"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Expiration": {
        "description": "Expiration represents a point in time when some event happens. It can compare with a BlockInfo and will return is_expired() == true once the condition is hit (and for every block in the future)",
        "oneOf": [
          {
            "description": "AtHeight will expire when `env.block.height` >= height",
            "type": "object",
            "required": [
              "at_height"
            ],
            "properties": {
              "at_height": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          },
          {
            "description": "AtTime will expire when `env.block.time` >= time",
            "type": "object",
            "required": [
              "at_time"
            ],
            "properties": {
              "at_time": {
                "$ref": "#/definitions/Timestamp"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Never will never expire. Used to express the empty variant",
            "type": "object",
            "required": [
              "never"
            ],
            "properties": {
              "never": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "MetadataAttribute": {
        "type": "object",
        "required": [
          "trait_type",
          "value"
        ],
        "properties": {
          "display_type": {
            "description": "The string used to display the attribute, if none is provided the `key` field can be used",
            "type": [
              "string",
              "null"
            ]
          },
          "trait_type": {
            "description": "The key for the attribute",
            "type": "string"
          },
          "value": {
            "description": "The value for the attribute",
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "MintMsg_for_TokenExtension": {
        "type": "object",
        "required": [
          "extension",
          "owner",
          "token_id"
        ],
        "properties": {
          "extension": {
            "description": "Any custom extension used by this contract",
            "allOf": [
              {
                "$ref": "#/definitions/TokenExtension"
              }
            ]
          },
          "owner": {
            "description": "The owner of the newly minter NFT",
            "type": "string"
          },
          "token_id": {
            "description": "Unique ID of the NFT",
            "type": "string"
          },
          "token_uri": {
            "description": "Universal resource identifier for this NFT Should point to a JSON file that conforms to the ERC721 Metadata JSON Schema",
            "type": [
              "string",
              "null"
            ]
          }
        },
        "additionalProperties": false
      },
      "Module": {
        "description": "A struct describing a token module, provided with the instantiation message this struct is used to record the info about the module and how/if it should be instantiated",
        "type": "object",
        "required": [
          "address",
          "is_mutable",
          "module_type"
        ],
        "properties": {
          "address": {
            "$ref": "#/definitions/AndrAddress"
          },
          "is_mutable": {
            "type": "boolean"
          },
          "module_type": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "PrimitivePointer": {
        "type": "object",
        "required": [
          "address"
        ],
        "properties": {
          "address": {
            "description": "The address of the primitive contract.",
            "allOf": [
              {
                "$ref": "#/definitions/AndrAddress"
              }
            ]
          },
          "key": {
            "description": "The optional key for the stored data.",
            "type": [
              "string",
              "null"
            ]
          }
        },
        "additionalProperties": false
      },
      "Recipient": {
        "oneOf": [
          {
            "description": "An address that is not another ADO. It is assumed that it is a valid address.",
            "type": "object",
            "required": [
              "addr"
            ],
            "properties": {
              "addr": {
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "a_d_o"
            ],
            "properties": {
              "a_d_o": {
                "$ref": "#/definitions/ADORecipient"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Timestamp": {
        "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
        "allOf": [
          {
            "$ref": "#/definitions/Uint64"
          }
        ]
      },
      "TokenExtension": {
        "description": "https://docs.opensea.io/docs/metadata-standards Replicates OpenSea Metadata Standards",
        "type": "object",
        "required": [
          "attributes",
          "image",
          "name",
          "publisher"
        ],
        "properties": {
          "animation_url": {
            "description": "A URL to any multi-media attachments",
            "type": [
              "string",
              "null"
            ]
          },
          "attributes": {
            "description": "The metadata of the token (if it exists)",
            "type": "array",
            "items": {
              "$ref": "#/definitions/MetadataAttribute"
            }
          },
          "description": {
            "description": "An optional description of the token",
            "type": [
              "string",
              "null"
            ]
          },
          "external_url": {
            "description": "A URL to the token's source",
            "type": [
              "string",
              "null"
            ]
          },
          "image": {
            "description": "URL to token image",
            "type": "string"
          },
          "image_data": {
            "description": "Raw SVG image data",
            "type": [
              "string",
              "null"
            ]
          },
          "name": {
            "description": "The name of the token",
            "type": "string"
          },
          "publisher": {
            "description": "The original publisher of the token",
            "type": "string"
          },
          "youtube_url": {
            "description": "A URL to a related YouTube videos",
            "type": [
              "string",
              "null"
            ]
          }
        },
        "additionalProperties": false
      },
      "TransferAgreement": {
        "description": "A struct used to represent an agreed transfer of a token. The `purchaser` may use the `Transfer` message for this token as long as funds are provided equalling the `amount` defined in the agreement.",
        "type": "object",
        "required": [
          "amount",
          "purchaser"
        ],
        "properties": {
          "amount": {
            "description": "The amount required for the purchaser to transfer ownership of the token",
            "allOf": [
              {
                "$ref": "#/definitions/Value_for_Coin"
              }
            ]
          },
          "purchaser": {
            "description": "The address of the purchaser",
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      },
      "Uint64": {
        "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
        "type": "string"
      },
      "Value_for_Coin": {
        "oneOf": [
          {
            "description": "The raw value.",
            "type": "object",
            "required": [
              "raw"
            ],
            "properties": {
              "raw": {
                "$ref": "#/definitions/Coin"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "The pointer to the primitive. This SHOULD be of the same underlying type as `T`. For example, if `T` is `String`, then `PrimitivePointer` should point to a Primitive::String(..). This cannot be enforced at compile time though, so it is up to the discretion of the user.",
            "type": "object",
            "required": [
              "pointer"
            ],
            "properties": {
              "pointer": {
                "$ref": "#/definitions/PrimitivePointer"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Withdrawal": {
        "type": "object",
        "required": [
          "token"
        ],
        "properties": {
          "token": {
            "type": "string"
          },
          "withdrawal_type": {
            "anyOf": [
              {
                "$ref": "#/definitions/WithdrawalType"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "WithdrawalType": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "amount"
            ],
            "properties": {
              "amount": {
                "$ref": "#/definitions/Uint128"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "percentage"
            ],
            "properties": {
              "percentage": {
                "$ref": "#/definitions/Decimal"
              }
            },
            "additionalProperties": false
          }
        ]
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "andr_query"
        ],
        "properties": {
          "andr_query": {
            "$ref": "#/definitions/AndromedaQuery"
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "andr_hook"
        ],
        "properties": {
          "andr_hook": {
            "$ref": "#/definitions/AndromedaHook"
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Owner of the given token by ID",
        "type": "object",
        "required": [
          "owner_of"
        ],
        "properties": {
          "owner_of": {
            "type": "object",
            "required": [
              "token_id"
            ],
            "properties": {
              "include_expired": {
                "type": [
                  "boolean",
                  "null"
                ]
              },
              "token_id": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Approvals for a given address (paginated)",
        "type": "object",
        "required": [
          "all_operators"
        ],
        "properties": {
          "all_operators": {
            "type": "object",
            "required": [
              "owner"
            ],
            "properties": {
              "include_expired": {
                "type": [
                  "boolean",
                  "null"
                ]
              },
              "limit": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              },
              "owner": {
                "type": "string"
              },
              "start_after": {
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Amount of tokens minted by the contract",
        "type": "object",
        "required": [
          "num_tokens"
        ],
        "properties": {
          "num_tokens": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "The data of a token",
        "type": "object",
        "required": [
          "nft_info"
        ],
        "properties": {
          "nft_info": {
            "type": "object",
            "required": [
              "token_id"
            ],
            "properties": {
              "token_id": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "The data of a token and any approvals assigned to it",
        "type": "object",
        "required": [
          "all_nft_info"
        ],
        "properties": {
          "all_nft_info": {
            "type": "object",
            "required": [
              "token_id"
            ],
            "properties": {
              "include_expired": {
                "type": [
                  "boolean",
                  "null"
                ]
              },
              "token_id": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "All tokens minted by the contract owned by a given address (paginated)",
        "type": "object",
        "required": [
          "tokens"
        ],
        "properties": {
          "tokens": {
            "type": "object",
            "required": [
              "owner"
            ],
            "properties": {
              "limit": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              },
              "owner": {
                "type": "string"
              },
              "start_after": {
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "All tokens minted by the contract (paginated)",
        "type": "object",
        "required": [
          "all_tokens"
        ],
        "properties": {
          "all_tokens": {
            "type": "object",
            "properties": {
              "limit": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              },
              "start_after": {
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "If the token is archived",
        "type": "object",
        "required": [
          "is_archived"
        ],
        "properties": {
          "is_archived": {
            "type": "object",
            "required": [
              "token_id"
            ],
            "properties": {
              "token_id": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "The transfer agreement for the token",
        "type": "object",
        "required": [
          "transfer_agreement"
        ],
        "properties": {
          "transfer_agreement": {
            "type": "object",
            "required": [
              "token_id"
            ],
            "properties": {
              "token_id": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "The current config of the contract",
        "type": "object",
        "required": [
          "contract_info"
        ],
        "properties": {
          "contract_info": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "extension"
        ],
        "properties": {
          "extension": {
            "type": "object",
            "required": [
              "msg"
            ],
            "properties": {
              "msg": {
                "$ref": "#/definitions/QueryMsg"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "minter"
        ],
        "properties": {
          "minter": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "AndromedaHook": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "on_execute"
            ],
            "properties": {
              "on_execute": {
                "type": "object",
                "required": [
                  "payload",
                  "sender"
                ],
                "properties": {
                  "payload": {
                    "$ref": "#/definitions/Binary"
                  },
                  "sender": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "on_funds_transfer"
            ],
            "properties": {
              "on_funds_transfer": {
                "type": "object",
                "required": [
                  "amount",
                  "payload",
                  "sender"
                ],
                "properties": {
                  "amount": {
                    "$ref": "#/definitions/Funds"
                  },
                  "payload": {
                    "$ref": "#/definitions/Binary"
                  },
                  "sender": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "on_transfer"
            ],
            "properties": {
              "on_transfer": {
                "type": "object",
                "required": [
                  "recipient",
                  "sender",
                  "token_id"
                ],
                "properties": {
                  "recipient": {
                    "type": "string"
                  },
                  "sender": {
                    "type": "string"
                  },
                  "token_id": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "AndromedaQuery": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "get"
            ],
            "properties": {
              "get": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/Binary"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "owner"
            ],
            "properties": {
              "owner": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "operators"
            ],
            "properties": {
              "operators": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "original_publisher"
            ],
            "properties": {
              "original_publisher": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "block_height_upon_creation"
            ],
            "properties": {
              "block_height_upon_creation": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "is_operator"
            ],
            "properties": {
              "is_operator": {
                "type": "object",
                "required": [
                  "address"
                ],
                "properties": {
                  "address": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "module"
            ],
            "properties": {
              "module": {
                "type": "object",
                "required": [
                  "id"
                ],
                "properties": {
                  "id": {
                    "$ref": "#/definitions/Uint64"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "module_ids"
            ],
            "properties": {
              "module_ids": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "version"
            ],
            "properties": {
              "version": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Binary": {
        "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
        "type": "string"
      },
      "Coin": {
        "type": "object",
        "required": [
          "amount",
          "denom"
        ],
        "properties": {
          "amount": {
            "$ref": "#/definitions/Uint128"
          },
          "denom": {
            "type": "string"
          }
        }
      },
      "Cw20Coin": {
        "type": "object",
        "required": [
          "address",
          "amount"
        ],
        "properties": {
          "address": {
            "type": "string"
          },
          "amount": {
            "$ref": "#/definitions/Uint128"
          }
        },
        "additionalProperties": false
      },
      "Funds": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "native"
            ],
            "properties": {
              "native": {
                "$ref": "#/definitions/Coin"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "cw20"
            ],
            "properties": {
              "cw20": {
                "$ref": "#/definitions/Cw20Coin"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "QueryMsg": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "andr_query"
            ],
            "properties": {
              "andr_query": {
                "$ref": "#/definitions/AndromedaQuery"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "andr_hook"
            ],
            "properties": {
              "andr_hook": {
                "$ref": "#/definitions/AndromedaHook"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Owner of the given token by ID",
            "type": "object",
            "required": [
              "owner_of"
            ],
            "properties": {
              "owner_of": {
                "type": "object",
                "required": [
                  "token_id"
                ],
                "properties": {
                  "include_expired": {
                    "type": [
                      "boolean",
                      "null"
                    ]
                  },
                  "token_id": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Approvals for a given address (paginated)",
            "type": "object",
            "required": [
              "all_operators"
            ],
            "properties": {
              "all_operators": {
                "type": "object",
                "required": [
                  "owner"
                ],
                "properties": {
                  "include_expired": {
                    "type": [
                      "boolean",
                      "null"
                    ]
                  },
                  "limit": {
                    "type": [
                      "integer",
                      "null"
                    ],
                    "format": "uint32",
                    "minimum": 0.0
                  },
                  "owner": {
                    "type": "string"
                  },
                  "start_after": {
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Amount of tokens minted by the contract",
            "type": "object",
            "required": [
              "num_tokens"
            ],
            "properties": {
              "num_tokens": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "The data of a token",
            "type": "object",
            "required": [
              "nft_info"
            ],
            "properties": {
              "nft_info": {
                "type": "object",
                "required": [
                  "token_id"
                ],
                "properties": {
                  "token_id": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "The data of a token and any approvals assigned to it",
            "type": "object",
            "required": [
              "all_nft_info"
            ],
            "properties": {
              "all_nft_info": {
                "type": "object",
                "required": [
                  "token_id"
                ],
                "properties": {
                  "include_expired": {
                    "type": [
                      "boolean",
                      "null"
                    ]
                  },
                  "token_id": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "All tokens minted by the contract owned by a given address (paginated)",
            "type": "object",
            "required": [
              "tokens"
            ],
            "properties": {
              "tokens": {
                "type": "object",
                "required": [
                  "owner"
                ],
                "properties": {
                  "limit": {
                    "type": [
                      "integer",
                      "null"
                    ],
                    "format": "uint32",
                    "minimum": 0.0
                  },
                  "owner": {
                    "type": "string"
                  },
                  "start_after": {
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "All tokens minted by the contract (paginated)",
            "type": "object",
            "required": [
              "all_tokens"
            ],
            "properties": {
              "all_tokens": {
                "type": "object",
                "properties": {
                  "limit": {
                    "type": [
                      "integer",
                      "null"
                    ],
                    "format": "uint32",
                    "minimum": 0.0
                  },
                  "start_after": {
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "If the token is archived",
            "type": "object",
            "required": [
              "is_archived"
            ],
            "properties": {
              "is_archived": {
                "type": "object",
                "required": [
                  "token_id"
                ],
                "properties": {
                  "token_id": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "The transfer agreement for the token",
            "type": "object",
            "required": [
              "transfer_agreement"
            ],
            "properties": {
              "transfer_agreement": {
                "type": "object",
                "required": [
                  "token_id"
                ],
                "properties": {
                  "token_id": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "The current config of the contract",
            "type": "object",
            "required": [
              "contract_info"
            ],
            "properties": {
              "contract_info": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "extension"
            ],
            "properties": {
              "extension": {
                "type": "object",
                "required": [
                  "msg"
                ],
                "properties": {
                  "msg": {
                    "$ref": "#/definitions/QueryMsg"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "minter"
            ],
            "properties": {
              "minter": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      },
      "Uint64": {
        "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
        "type": "string"
      }
    }
  },
  "migrate": null,
  "sudo": null,
  "responses": {
    "all_nft_info": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "AllNftInfoResponse_for_TokenExtension",
      "type": "object",
      "required": [
        "access",
        "info"
      ],
      "properties": {
        "access": {
          "description": "Who can transfer the token",
          "allOf": [
            {
              "$ref": "#/definitions/OwnerOfResponse"
            }
          ]
        },
        "info": {
          "description": "Data on the token itself,",
          "allOf": [
            {
              "$ref": "#/definitions/NftInfoResponse_for_TokenExtension"
            }
          ]
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Approval": {
          "type": "object",
          "required": [
            "expires",
            "spender"
          ],
          "properties": {
            "expires": {
              "description": "When the Approval expires (maybe Expiration::never)",
              "allOf": [
                {
                  "$ref": "#/definitions/Expiration"
                }
              ]
            },
            "spender": {
              "description": "Account that can transfer/send the token",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "Expiration": {
          "description": "Expiration represents a point in time when some event happens. It can compare with a BlockInfo and will return is_expired() == true once the condition is hit (and for every block in the future)",
          "oneOf": [
            {
              "description": "AtHeight will expire when `env.block.height` >= height",
              "type": "object",
              "required": [
                "at_height"
              ],
              "properties": {
                "at_height": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              },
              "additionalProperties": false
            },
            {
              "description": "AtTime will expire when `env.block.time` >= time",
              "type": "object",
              "required": [
                "at_time"
              ],
              "properties": {
                "at_time": {
                  "$ref": "#/definitions/Timestamp"
                }
              },
              "additionalProperties": false
            },
            {
              "description": "Never will never expire. Used to express the empty variant",
              "type": "object",
              "required": [
                "never"
              ],
              "properties": {
                "never": {
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "MetadataAttribute": {
          "type": "object",
          "required": [
            "trait_type",
            "value"
          ],
          "properties": {
            "display_type": {
              "description": "The string used to display the attribute, if none is provided the `key` field can be used",
              "type": [
                "string",
                "null"
              ]
            },
            "trait_type": {
              "description": "The key for the attribute",
              "type": "string"
            },
            "value": {
              "description": "The value for the attribute",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "NftInfoResponse_for_TokenExtension": {
          "type": "object",
          "required": [
            "extension"
          ],
          "properties": {
            "extension": {
              "description": "You can add any custom metadata here when you extend cw721-base",
              "allOf": [
                {
                  "$ref": "#/definitions/TokenExtension"
                }
              ]
            },
            "token_uri": {
              "description": "Universal resource identifier for this NFT Should point to a JSON file that conforms to the ERC721 Metadata JSON Schema",
              "type": [
                "string",
                "null"
              ]
            }
          },
          "additionalProperties": false
        },
        "OwnerOfResponse": {
          "type": "object",
          "required": [
            "approvals",
            "owner"
          ],
          "properties": {
            "approvals": {
              "description": "If set this address is approved to transfer/send the token as well",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Approval"
              }
            },
            "owner": {
              "description": "Owner of the token",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "TokenExtension": {
          "description": "https://docs.opensea.io/docs/metadata-standards Replicates OpenSea Metadata Standards",
          "type": "object",
          "required": [
            "attributes",
            "image",
            "name",
            "publisher"
          ],
          "properties": {
            "animation_url": {
              "description": "A URL to any multi-media attachments",
              "type": [
                "string",
                "null"
              ]
            },
            "attributes": {
              "description": "The metadata of the token (if it exists)",
              "type": "array",
              "items": {
                "$ref": "#/definitions/MetadataAttribute"
              }
            },
            "description": {
              "description": "An optional description of the token",
              "type": [
                "string",
                "null"
              ]
            },
            "external_url": {
              "description": "A URL to the token's source",
              "type": [
                "string",
                "null"
              ]
            },
            "image": {
              "description": "URL to token image",
              "type": "string"
            },
            "image_data": {
              "description": "Raw SVG image data",
              "type": [
                "string",
                "null"
              ]
            },
            "name": {
              "description": "The name of the token",
              "type": "string"
            },
            "publisher": {
              "description": "The original publisher of the token",
              "type": "string"
            },
            "youtube_url": {
              "description": "A URL to a related YouTube videos",
              "type": [
                "string",
                "null"
              ]
            }
          },
          "additionalProperties": false
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    },
    "all_operators": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "OperatorsResponse",
      "type": "object",
      "required": [
        "operators"
      ],
      "properties": {
        "operators": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Approval"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Approval": {
          "type": "object",
          "required": [
            "expires",
            "spender"
          ],
          "properties": {
            "expires": {
              "description": "When the Approval expires (maybe Expiration::never)",
              "allOf": [
                {
                  "$ref": "#/definitions/Expiration"
                }
              ]
            },
            "spender": {
              "description": "Account that can transfer/send the token",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "Expiration": {
          "description": "Expiration represents a point in time when some event happens. It can compare with a BlockInfo and will return is_expired() == true once the condition is hit (and for every block in the future)",
          "oneOf": [
            {
              "description": "AtHeight will expire when `env.block.height` >= height",
              "type": "object",
              "required": [
                "at_height"
              ],
              "properties": {
                "at_height": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              },
              "additionalProperties": false
            },
            {
              "description": "AtTime will expire when `env.block.time` >= time",
              "type": "object",
              "required": [
                "at_time"
              ],
              "properties": {
                "at_time": {
                  "$ref": "#/definitions/Timestamp"
                }
              },
              "additionalProperties": false
            },
            {
              "description": "Never will never expire. Used to express the empty variant",
              "type": "object",
              "required": [
                "never"
              ],
              "properties": {
                "never": {
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    },
    "all_tokens": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "TokensResponse",
      "type": "object",
      "required": [
        "tokens"
      ],
      "properties": {
        "tokens": {
          "description": "Contains all token_ids in lexicographical ordering If there are more than `limit`, use `start_from` in future queries to achieve pagination.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    },
    "andr_hook": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "AndromedaHook",
      "oneOf": [
        {
          "type": "object",
          "required": [
            "on_execute"
          ],
          "properties": {
            "on_execute": {
              "type": "object",
              "required": [
                "payload",
                "sender"
              ],
              "properties": {
                "payload": {
                  "$ref": "#/definitions/Binary"
                },
                "sender": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "on_funds_transfer"
          ],
          "properties": {
            "on_funds_transfer": {
              "type": "object",
              "required": [
                "amount",
                "payload",
                "sender"
              ],
              "properties": {
                "amount": {
                  "$ref": "#/definitions/Funds"
                },
                "payload": {
                  "$ref": "#/definitions/Binary"
                },
                "sender": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "on_transfer"
          ],
          "properties": {
            "on_transfer": {
              "type": "object",
              "required": [
                "recipient",
                "sender",
                "token_id"
              ],
              "properties": {
                "recipient": {
                  "type": "string"
                },
                "sender": {
                  "type": "string"
                },
                "token_id": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ],
      "definitions": {
        "Binary": {
          "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
          "type": "string"
        },
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          }
        },
        "Cw20Coin": {
          "type": "object",
          "required": [
            "address",
            "amount"
          ],
          "properties": {
            "address": {
              "type": "string"
            },
            "amount": {
              "$ref": "#/definitions/Uint128"
            }
          },
          "additionalProperties": false
        },
        "Funds": {
          "oneOf": [
            {
              "type": "object",
              "required": [
                "native"
              ],
              "properties": {
                "native": {
                  "$ref": "#/definitions/Coin"
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "cw20"
              ],
              "properties": {
                "cw20": {
                  "$ref": "#/definitions/Cw20Coin"
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "andr_query": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "AndromedaQuery",
      "oneOf": [
        {
          "type": "object",
          "required": [
            "get"
          ],
          "properties": {
            "get": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Binary"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "owner"
          ],
          "properties": {
            "owner": {
              "type": "object",
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "operators"
          ],
          "properties": {
            "operators": {
              "type": "object",
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "type": {
              "type": "object",
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "original_publisher"
          ],
          "properties": {
            "original_publisher": {
              "type": "object",
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "block_height_upon_creation"
          ],
          "properties": {
            "block_height_upon_creation": {
              "type": "object",
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "is_operator"
          ],
          "properties": {
            "is_operator": {
              "type": "object",
              "required": [
                "address"
              ],
              "properties": {
                "address": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "module"
          ],
          "properties": {
            "module": {
              "type": "object",
              "required": [
                "id"
              ],
              "properties": {
                "id": {
                  "$ref": "#/definitions/Uint64"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "module_ids"
          ],
          "properties": {
            "module_ids": {
              "type": "object",
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "version"
          ],
          "properties": {
            "version": {
              "type": "object",
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ],
      "definitions": {
        "Binary": {
          "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
          "type": "string"
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    },
    "contract_info": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ContractInfoResponse",
      "type": "object",
      "required": [
        "name",
        "symbol"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "symbol": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "extension": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "TokenExtension",
      "description": "https://docs.opensea.io/docs/metadata-standards Replicates OpenSea Metadata Standards",
      "type": "object",
      "required": [
        "attributes",
        "image",
        "name",
        "publisher"
      ],
      "properties": {
        "animation_url": {
          "description": "A URL to any multi-media attachments",
          "type": [
            "string",
            "null"
          ]
        },
        "attributes": {
          "description": "The metadata of the token (if it exists)",
          "type": "array",
          "items": {
            "$ref": "#/definitions/MetadataAttribute"
          }
        },
        "description": {
          "description": "An optional description of the token",
          "type": [
            "string",
            "null"
          ]
        },
        "external_url": {
          "description": "A URL to the token's source",
          "type": [
            "string",
            "null"
          ]
        },
        "image": {
          "description": "URL to token image",
          "type": "string"
        },
        "image_data": {
          "description": "Raw SVG image data",
          "type": [
            "string",
            "null"
          ]
        },
        "name": {
          "description": "The name of the token",
          "type": "string"
        },
        "publisher": {
          "description": "The original publisher of the token",
          "type": "string"
        },
        "youtube_url": {
          "description": "A URL to a related YouTube videos",
          "type": [
            "string",
            "null"
          ]
        }
      },
      "additionalProperties": false,
      "definitions": {
        "MetadataAttribute": {
          "type": "object",
          "required": [
            "trait_type",
            "value"
          ],
          "properties": {
            "display_type": {
              "description": "The string used to display the attribute, if none is provided the `key` field can be used",
              "type": [
                "string",
                "null"
              ]
            },
            "trait_type": {
              "description": "The key for the attribute",
              "type": "string"
            },
            "value": {
              "description": "The value for the attribute",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      }
    },
    "is_archived": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Boolean",
      "type": "boolean"
    },
    "minter": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "MinterResponse",
      "description": "Shows who can mint these tokens",
      "type": "object",
      "required": [
        "minter"
      ],
      "properties": {
        "minter": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "nft_info": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "NftInfoResponse_for_TokenExtension",
      "type": "object",
      "required": [
        "extension"
      ],
      "properties": {
        "extension": {
          "description": "You can add any custom metadata here when you extend cw721-base",
          "allOf": [
            {
              "$ref": "#/definitions/TokenExtension"
            }
          ]
        },
        "token_uri": {
          "description": "Universal resource identifier for this NFT Should point to a JSON file that conforms to the ERC721 Metadata JSON Schema",
          "type": [
            "string",
            "null"
          ]
        }
      },
      "additionalProperties": false,
      "definitions": {
        "MetadataAttribute": {
          "type": "object",
          "required": [
            "trait_type",
            "value"
          ],
          "properties": {
            "display_type": {
              "description": "The string used to display the attribute, if none is provided the `key` field can be used",
              "type": [
                "string",
                "null"
              ]
            },
            "trait_type": {
              "description": "The key for the attribute",
              "type": "string"
            },
            "value": {
              "description": "The value for the attribute",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "TokenExtension": {
          "description": "https://docs.opensea.io/docs/metadata-standards Replicates OpenSea Metadata Standards",
          "type": "object",
          "required": [
            "attributes",
            "image",
            "name",
            "publisher"
          ],
          "properties": {
            "animation_url": {
              "description": "A URL to any multi-media attachments",
              "type": [
                "string",
                "null"
              ]
            },
            "attributes": {
              "description": "The metadata of the token (if it exists)",
              "type": "array",
              "items": {
                "$ref": "#/definitions/MetadataAttribute"
              }
            },
            "description": {
              "description": "An optional description of the token",
              "type": [
                "string",
                "null"
              ]
            },
            "external_url": {
              "description": "A URL to the token's source",
              "type": [
                "string",
                "null"
              ]
            },
            "image": {
              "description": "URL to token image",
              "type": "string"
            },
            "image_data": {
              "description": "Raw SVG image data",
              "type": [
                "string",
                "null"
              ]
            },
            "name": {
              "description": "The name of the token",
              "type": "string"
            },
            "publisher": {
              "description": "The original publisher of the token",
              "type": "string"
            },
            "youtube_url": {
              "description": "A URL to a related YouTube videos",
              "type": [
                "string",
                "null"
              ]
            }
          },
          "additionalProperties": false
        }
      }
    },
    "num_tokens": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "NumTokensResponse",
      "type": "object",
      "required": [
        "count"
      ],
      "properties": {
        "count": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      },
      "additionalProperties": false
    },
    "owner_of": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "OwnerOfResponse",
      "type": "object",
      "required": [
        "approvals",
        "owner"
      ],
      "properties": {
        "approvals": {
          "description": "If set this address is approved to transfer/send the token as well",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Approval"
          }
        },
        "owner": {
          "description": "Owner of the token",
          "type": "string"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Approval": {
          "type": "object",
          "required": [
            "expires",
            "spender"
          ],
          "properties": {
            "expires": {
              "description": "When the Approval expires (maybe Expiration::never)",
              "allOf": [
                {
                  "$ref": "#/definitions/Expiration"
                }
              ]
            },
            "spender": {
              "description": "Account that can transfer/send the token",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "Expiration": {
          "description": "Expiration represents a point in time when some event happens. It can compare with a BlockInfo and will return is_expired() == true once the condition is hit (and for every block in the future)",
          "oneOf": [
            {
              "description": "AtHeight will expire when `env.block.height` >= height",
              "type": "object",
              "required": [
                "at_height"
              ],
              "properties": {
                "at_height": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              },
              "additionalProperties": false
            },
            {
              "description": "AtTime will expire when `env.block.time` >= time",
              "type": "object",
              "required": [
                "at_time"
              ],
              "properties": {
                "at_time": {
                  "$ref": "#/definitions/Timestamp"
                }
              },
              "additionalProperties": false
            },
            {
              "description": "Never will never expire. Used to express the empty variant",
              "type": "object",
              "required": [
                "never"
              ],
              "properties": {
                "never": {
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    },
    "tokens": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "TokensResponse",
      "type": "object",
      "required": [
        "tokens"
      ],
      "properties": {
        "tokens": {
          "description": "Contains all token_ids in lexicographical ordering If there are more than `limit`, use `start_from` in future queries to achieve pagination.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    },
    "transfer_agreement": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Nullable_TransferAgreement",
      "anyOf": [
        {
          "$ref": "#/definitions/TransferAgreement"
        },
        {
          "type": "null"
        }
      ],
      "definitions": {
        "AndrAddress": {
          "type": "object",
          "required": [
            "identifier"
          ],
          "properties": {
            "identifier": {
              "description": "Can be either an address or identifier of an ADO in a app.",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          }
        },
        "PrimitivePointer": {
          "type": "object",
          "required": [
            "address"
          ],
          "properties": {
            "address": {
              "description": "The address of the primitive contract.",
              "allOf": [
                {
                  "$ref": "#/definitions/AndrAddress"
                }
              ]
            },
            "key": {
              "description": "The optional key for the stored data.",
              "type": [
                "string",
                "null"
              ]
            }
          },
          "additionalProperties": false
        },
        "TransferAgreement": {
          "description": "A struct used to represent an agreed transfer of a token. The `purchaser` may use the `Transfer` message for this token as long as funds are provided equalling the `amount` defined in the agreement.",
          "type": "object",
          "required": [
            "amount",
            "purchaser"
          ],
          "properties": {
            "amount": {
              "description": "The amount required for the purchaser to transfer ownership of the token",
              "allOf": [
                {
                  "$ref": "#/definitions/Value_for_Coin"
                }
              ]
            },
            "purchaser": {
              "description": "The address of the purchaser",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "Value_for_Coin": {
          "oneOf": [
            {
              "description": "The raw value.",
              "type": "object",
              "required": [
                "raw"
              ],
              "properties": {
                "raw": {
                  "$ref": "#/definitions/Coin"
                }
              },
              "additionalProperties": false
            },
            {
              "description": "The pointer to the primitive. This SHOULD be of the same underlying type as `T`. For example, if `T` is `String`, then `PrimitivePointer` should point to a Primitive::String(..). This cannot be enforced at compile time though, so it is up to the discretion of the user.",
              "type": "object",
              "required": [
                "pointer"
              ],
              "properties": {
                "pointer": {
                  "$ref": "#/definitions/PrimitivePointer"
                }
              },
              "additionalProperties": false
            }
          ]
        }
      }
    }
  }
}

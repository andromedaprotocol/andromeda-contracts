{
  "contract_name": "andromeda-lockdrop",
  "contract_version": "1.0.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "required": [
      "deposit_window",
      "incentive_token",
      "init_timestamp",
      "native_denom",
      "withdrawal_window"
    ],
    "properties": {
      "deposit_window": {
        "description": "Number of seconds for which lockup deposits will be accepted",
        "type": "integer",
        "format": "uint64",
        "minimum": 0.0
      },
      "incentive_token": {
        "description": "The token being given as incentive.",
        "type": "string"
      },
      "init_timestamp": {
        "description": "The bootsrap contract to be used in the second phase. Timestamp till when deposits can be made",
        "type": "integer",
        "format": "uint64",
        "minimum": 0.0
      },
      "native_denom": {
        "description": "The native token being deposited.",
        "type": "string"
      },
      "withdrawal_window": {
        "description": "Number of seconds for which lockup withdrawals will be allowed",
        "type": "integer",
        "format": "uint64",
        "minimum": 0.0
      }
    },
    "additionalProperties": false
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "receive"
        ],
        "properties": {
          "receive": {
            "$ref": "#/definitions/Cw20ReceiveMsg"
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "andr_receive"
        ],
        "properties": {
          "andr_receive": {
            "$ref": "#/definitions/AndromedaMsg"
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Function to deposit native fund in the contract in exchange for recieving a proportion of the TOKEN.",
        "type": "object",
        "required": [
          "deposit_native"
        ],
        "properties": {
          "deposit_native": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Function to withdraw native fund from the lockup position.",
        "type": "object",
        "required": [
          "withdraw_native"
        ],
        "properties": {
          "withdraw_native": {
            "type": "object",
            "properties": {
              "amount": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/Uint128"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Facilitates reward claim after claims are enabled.",
        "type": "object",
        "required": [
          "claim_rewards"
        ],
        "properties": {
          "claim_rewards": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Called by the bootstrap contract when liquidity is added to the TOKEN-NATIVE Pool to enable TOKEN withdrawals by users.",
        "type": "object",
        "required": [
          "enable_claims"
        ],
        "properties": {
          "enable_claims": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Called by the owner after the phase is over to withdraw all of the NATIVE token to the given recipient, or themselves if not specified.",
        "type": "object",
        "required": [
          "withdraw_proceeds"
        ],
        "properties": {
          "withdraw_proceeds": {
            "type": "object",
            "properties": {
              "recipient": {
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "ADORecipient": {
        "description": "ADOs use a default Receive message for handling funds, this struct states that the recipient is an ADO and may attach the data field to the Receive message",
        "type": "object",
        "required": [
          "address"
        ],
        "properties": {
          "address": {
            "description": "Addr can also be a human-readable identifier used in a app contract.",
            "allOf": [
              {
                "$ref": "#/definitions/AndrAddress"
              }
            ]
          },
          "msg": {
            "anyOf": [
              {
                "$ref": "#/definitions/Binary"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "AndrAddress": {
        "type": "object",
        "required": [
          "identifier"
        ],
        "properties": {
          "identifier": {
            "description": "Can be either an address or identifier of an ADO in a app.",
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "AndromedaMsg": {
        "oneOf": [
          {
            "description": "Standard Messages",
            "type": "object",
            "required": [
              "receive"
            ],
            "properties": {
              "receive": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/Binary"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "update_owner"
            ],
            "properties": {
              "update_owner": {
                "type": "object",
                "required": [
                  "address"
                ],
                "properties": {
                  "address": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "update_operators"
            ],
            "properties": {
              "update_operators": {
                "type": "object",
                "required": [
                  "operators"
                ],
                "properties": {
                  "operators": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "update_app_contract"
            ],
            "properties": {
              "update_app_contract": {
                "type": "object",
                "required": [
                  "address"
                ],
                "properties": {
                  "address": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "withdraw"
            ],
            "properties": {
              "withdraw": {
                "type": "object",
                "properties": {
                  "recipient": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/Recipient"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "tokens_to_withdraw": {
                    "type": [
                      "array",
                      "null"
                    ],
                    "items": {
                      "$ref": "#/definitions/Withdrawal"
                    }
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "register_module"
            ],
            "properties": {
              "register_module": {
                "type": "object",
                "required": [
                  "module"
                ],
                "properties": {
                  "module": {
                    "$ref": "#/definitions/Module"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "deregister_module"
            ],
            "properties": {
              "deregister_module": {
                "type": "object",
                "required": [
                  "module_idx"
                ],
                "properties": {
                  "module_idx": {
                    "$ref": "#/definitions/Uint64"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "alter_module"
            ],
            "properties": {
              "alter_module": {
                "type": "object",
                "required": [
                  "module",
                  "module_idx"
                ],
                "properties": {
                  "module": {
                    "$ref": "#/definitions/Module"
                  },
                  "module_idx": {
                    "$ref": "#/definitions/Uint64"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "refresh_address"
            ],
            "properties": {
              "refresh_address": {
                "type": "object",
                "required": [
                  "contract"
                ],
                "properties": {
                  "contract": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "refresh_addresses"
            ],
            "properties": {
              "refresh_addresses": {
                "type": "object",
                "properties": {
                  "limit": {
                    "type": [
                      "integer",
                      "null"
                    ],
                    "format": "uint32",
                    "minimum": 0.0
                  },
                  "start_after": {
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Binary": {
        "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
        "type": "string"
      },
      "Cw20ReceiveMsg": {
        "description": "Cw20ReceiveMsg should be de/serialized under `Receive()` variant in a ExecuteMsg",
        "type": "object",
        "required": [
          "amount",
          "msg",
          "sender"
        ],
        "properties": {
          "amount": {
            "$ref": "#/definitions/Uint128"
          },
          "msg": {
            "$ref": "#/definitions/Binary"
          },
          "sender": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Decimal": {
        "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
        "type": "string"
      },
      "Module": {
        "description": "A struct describing a token module, provided with the instantiation message this struct is used to record the info about the module and how/if it should be instantiated",
        "type": "object",
        "required": [
          "address",
          "is_mutable",
          "module_type"
        ],
        "properties": {
          "address": {
            "$ref": "#/definitions/AndrAddress"
          },
          "is_mutable": {
            "type": "boolean"
          },
          "module_type": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Recipient": {
        "oneOf": [
          {
            "description": "An address that is not another ADO. It is assumed that it is a valid address.",
            "type": "object",
            "required": [
              "addr"
            ],
            "properties": {
              "addr": {
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "a_d_o"
            ],
            "properties": {
              "a_d_o": {
                "$ref": "#/definitions/ADORecipient"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      },
      "Uint64": {
        "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
        "type": "string"
      },
      "Withdrawal": {
        "type": "object",
        "required": [
          "token"
        ],
        "properties": {
          "token": {
            "type": "string"
          },
          "withdrawal_type": {
            "anyOf": [
              {
                "$ref": "#/definitions/WithdrawalType"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "WithdrawalType": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "amount"
            ],
            "properties": {
              "amount": {
                "$ref": "#/definitions/Uint128"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "percentage"
            ],
            "properties": {
              "percentage": {
                "$ref": "#/definitions/Decimal"
              }
            },
            "additionalProperties": false
          }
        ]
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "andr_query"
        ],
        "properties": {
          "andr_query": {
            "$ref": "#/definitions/AndromedaQuery"
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Gets the config information.",
        "type": "object",
        "required": [
          "config"
        ],
        "properties": {
          "config": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Gets the state information.",
        "type": "object",
        "required": [
          "state"
        ],
        "properties": {
          "state": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Gets information for the user with `address`.",
        "type": "object",
        "required": [
          "user_info"
        ],
        "properties": {
          "user_info": {
            "type": "object",
            "required": [
              "address"
            ],
            "properties": {
              "address": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Gets the withdrawal percent allowed given the timestamp, or the current time if not specified.",
        "type": "object",
        "required": [
          "withdrawal_percent_allowed"
        ],
        "properties": {
          "withdrawal_percent_allowed": {
            "type": "object",
            "properties": {
              "timestamp": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "AndromedaQuery": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "get"
            ],
            "properties": {
              "get": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/Binary"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "owner"
            ],
            "properties": {
              "owner": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "operators"
            ],
            "properties": {
              "operators": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "original_publisher"
            ],
            "properties": {
              "original_publisher": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "block_height_upon_creation"
            ],
            "properties": {
              "block_height_upon_creation": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "is_operator"
            ],
            "properties": {
              "is_operator": {
                "type": "object",
                "required": [
                  "address"
                ],
                "properties": {
                  "address": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "module"
            ],
            "properties": {
              "module": {
                "type": "object",
                "required": [
                  "id"
                ],
                "properties": {
                  "id": {
                    "$ref": "#/definitions/Uint64"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "module_ids"
            ],
            "properties": {
              "module_ids": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "version"
            ],
            "properties": {
              "version": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Binary": {
        "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
        "type": "string"
      },
      "Uint64": {
        "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
        "type": "string"
      }
    }
  },
  "migrate": null,
  "sudo": null,
  "responses": {
    "andr_query": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "AndromedaQuery",
      "oneOf": [
        {
          "type": "object",
          "required": [
            "get"
          ],
          "properties": {
            "get": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Binary"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "owner"
          ],
          "properties": {
            "owner": {
              "type": "object",
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "operators"
          ],
          "properties": {
            "operators": {
              "type": "object",
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "type": {
              "type": "object",
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "original_publisher"
          ],
          "properties": {
            "original_publisher": {
              "type": "object",
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "block_height_upon_creation"
          ],
          "properties": {
            "block_height_upon_creation": {
              "type": "object",
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "is_operator"
          ],
          "properties": {
            "is_operator": {
              "type": "object",
              "required": [
                "address"
              ],
              "properties": {
                "address": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "module"
          ],
          "properties": {
            "module": {
              "type": "object",
              "required": [
                "id"
              ],
              "properties": {
                "id": {
                  "$ref": "#/definitions/Uint64"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "module_ids"
          ],
          "properties": {
            "module_ids": {
              "type": "object",
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "version"
          ],
          "properties": {
            "version": {
              "type": "object",
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ],
      "definitions": {
        "Binary": {
          "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
          "type": "string"
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    },
    "config": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ConfigResponse",
      "type": "object",
      "required": [
        "deposit_window",
        "incentive_token",
        "init_timestamp",
        "lockdrop_incentives",
        "native_denom",
        "withdrawal_window"
      ],
      "properties": {
        "deposit_window": {
          "description": "Number of seconds for which lockup deposits will be accepted.",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "incentive_token": {
          "description": "The token being given as incentive.",
          "type": "string"
        },
        "init_timestamp": {
          "description": "Bootstrap Contract address to which tokens can be delegated to for bootstrapping TOKEN-NATIVE Pool. Timestamp till when deposits can be made.",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "lockdrop_incentives": {
          "description": "Total token lockdrop incentives to be distributed among the users.",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "native_denom": {
          "description": "The native token being deposited.",
          "type": "string"
        },
        "withdrawal_window": {
          "description": "Number of seconds for which lockup withdrawals will be allowed.",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "state": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "StateResponse",
      "type": "object",
      "required": [
        "are_claims_allowed",
        "total_native_locked"
      ],
      "properties": {
        "are_claims_allowed": {
          "description": "Boolean value indicating if the user can withdraw their token rewards or not.",
          "type": "boolean"
        },
        "total_native_locked": {
          "description": "Total NATIVE deposited at the end of Lockdrop window. This value remains unchanged post the lockdrop window.",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "user_info": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "UserInfoResponse",
      "type": "object",
      "required": [
        "is_lockdrop_claimed",
        "total_incentives",
        "total_native_locked",
        "withdrawal_flag"
      ],
      "properties": {
        "is_lockdrop_claimed": {
          "type": "boolean"
        },
        "total_incentives": {
          "$ref": "#/definitions/Uint128"
        },
        "total_native_locked": {
          "$ref": "#/definitions/Uint128"
        },
        "withdrawal_flag": {
          "type": "boolean"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "withdrawal_percent_allowed": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Decimal",
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    }
  }
}

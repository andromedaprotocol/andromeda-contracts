name: Deploy OS
on:
  workflow_dispatch:
    inputs:
      network:
        description: "Network to deploy to"
        required: true
        type: string
      kernel_address:
        description: "Kernel address"
        required: false
        type: string
      deploy_os:
        description: "Deploy OS"
        required: false
        type: boolean
      contracts:
        description: "Contracts to deploy"
        required: false
        type: string

jobs:
  build_contracts:
    if: contains('["crnbarr93", "SlayerAnsh", "joemonem", "DimitrijeDragasevic", "cowboy0015"]', github.actor)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build Contracts
        run: |
          sudo make version-map
          make build
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: contracts
          path: ./artifacts/
          if-no-files-found: error

  build_schemas:
    if: contains('["crnbarr93", "SlayerAnsh", "joemonem", "DimitrijeDragasevic", "cowboy0015"]', github.actor)
    runs-on: ubuntu-latest
    outputs:
      schema_url: ${{ steps.upload-schemas.outputs.artifact-url }}
    steps:
      - uses: actions/checkout@v4
      - name: Build Schemas
        run: |
          make schemas
      - name: Upload Schemas to Temp
        id: upload-schemas
        uses: actions/upload-artifact@v4
        with:
          name: temp-schemas
          path: ./schemas/
          retention-days: 1
          if-no-files-found: error

  build_deploy_script:
    if: contains('["crnbarr93", "SlayerAnsh", "joemonem", "DimitrijeDragasevic", "cowboy0015"]', github.actor)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build Deploy Script
        run: cargo build -p andromeda-deploy --release
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: deploy
          path: ./target/release/andromeda-deploy
          if-no-files-found: error

  deploy:
    runs-on: ubuntu-latest
    needs: [build_contracts, build_schemas, build_deploy_script]
    env:
      DEPLOYMENT_CHAIN: ${{ inputs.network }}
      DEPLOYMENT_KERNEL_ADDRESS: ${{ inputs.kernel_address }}
      DEPLOY_OS: ${{ inputs.deploy_os }}
      DEPLOY_CONTRACTS: ${{ inputs.contracts }}
      SLACK_WEBHOOK_URL: "${{ secrets.DEPLOY_SLACK_WEBHOOK_URL }}"
      TEST_MNEMONIC: "${{ secrets.DEPLOY_TEST_MNEMONIC }}"
      RUST_LOG: info
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: 1.76.0
          components: rustfmt, clippy
      - name: Download Contracts
        uses: actions/download-artifact@v4
        with:
          name: contracts
          path: "./artifacts"
      - name: Download Deploy Script
        uses: actions/download-artifact@v4
        with:
          name: deploy
          path: "./"
      - name: Deploy
        run: |
          chmod +x ./andromeda-deploy
          ./andromeda-deploy

  trigger-schema-parser:
      needs: [deploy, build_schemas]
      runs-on: ubuntu-latest
      steps:
        - name: Set Branch Based on Kernel
          id: check-kernel
          run: |
            if [[ "${{ inputs.kernel_address }}" == "${{ vars.TESTNET_KERNELS }}" ]]; then
              echo "branch=develop" >> $GITHUB_OUTPUT
            elif [[ "${{ inputs.kernel_address }}" == "${{ vars.TESTNET_STAGING_KERNELS }}" ]]; then
              echo "branch=testnet-staging" >> $GITHUB_OUTPUT
            else
              echo "Error: Kernel not found in known configurations"
              exit 1
            fi

        - name: Checkout Schema Parser
          uses: actions/checkout@v4
          with:
            repository: andromedaprotocol/schema-parser
            ref: ${{ steps.check-kernel.outputs.branch }}
            token: ${{ secrets.CI_PAT }}

        - name: Download Schemas
          uses: actions/download-artifact@v4
          with:
            name: temp-schemas
            path: "packages/schema-parser/"

        - uses: pnpm/action-setup@v2
          with:
            version: 8

        - uses: actions/setup-node@v4
          with:
            node-version: '18'
            cache: 'pnpm'

        - name: Process Schema
          working-directory: packages/schema-parser
          run: |
            pnpm install
            ls -a
            cd packages/schema-parser
            ls -a
            unzip temp-schemas.zip
            ls -a
            npm run start
            npm run flatten
            npm run export

        - name: Commit and Push Changes
          run: |
            git config --global user.name 'github-actions[bot]'
            git config --global user.email 'github-actions[bot]@users.noreply.github.com'
            
            if [[ -n $(git status --porcelain) ]]; then
              git add .
              git commit -m "chore: Update schema for kernel: ${{ inputs.kernel_address }}"
              git push
            else
              echo "No changes to commit"
            fi
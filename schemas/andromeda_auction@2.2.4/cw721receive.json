{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "cw721receive",
  "oneOf": [
    {
      "description": "Starts a new auction with the given parameters. The auction info can be modified before it has started but is immutable after that.",
      "type": "object",
      "required": [
        "start_auction"
      ],
      "properties": {
        "start_auction": {
          "type": "object",
          "required": [
            "coin_denom",
            "end_time"
          ],
          "properties": {
            "buy_now_price": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Uint128"
                },
                {
                  "type": "null"
                }
              ]
            },
            "coin_denom": {
              "$ref": "#/definitions/Asset"
            },
            "end_time": {
              "description": "Duration in milliseconds",
              "allOf": [
                {
                  "$ref": "#/definitions/Expiry"
                }
              ]
            },
            "min_bid": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Uint128"
                },
                {
                  "type": "null"
                }
              ]
            },
            "min_raise": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Uint128"
                },
                {
                  "type": "null"
                }
              ]
            },
            "recipient": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Recipient"
                },
                {
                  "type": "null"
                }
              ]
            },
            "start_time": {
              "description": "Start time in milliseconds since epoch",
              "anyOf": [
                {
                  "$ref": "#/definitions/Expiry"
                },
                {
                  "type": "null"
                }
              ]
            },
            "whitelist": {
              "type": [
                "array",
                "null"
              ],
              "items": {
                "$ref": "#/definitions/Addr"
              }
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "AndrAddr": {
      "description": "An address that can be used within the Andromeda ecosystem. Inspired by the cosmwasm-std `Addr` type. https://github.com/CosmWasm/cosmwasm/blob/2a1c698520a1aacedfe3f4803b0d7d653892217a/packages/std/src/addresses.rs#L33\n\nThis address can be one of two things: 1. A valid human readable address e.g. `cosmos1...` 2. A valid Andromeda VFS path e.g. `/home/user/app/component`\n\nVFS paths can be local in the case of an app and can be done by referencing `./component` they can also contain protocols for cross chain communication. A VFS path is usually structured as so:\n\n`<protocol>://<chain (required if ibc used)>/<path>` or `ibc://cosmoshub-4/user/app/component`",
      "type": "string",
      "pattern": "(^((([A-Za-z0-9]+://)?([A-Za-z0-9.\\-_]{2,80}/)))?((~[a-z0-9]{2,}|(lib|home))(/[A-Za-z0-9.\\-_]{2,80}?)*(/)?)$)|(^(~[a-z0-9]{2,}|/(lib|home))(/[A-Za-z0-9.\\-_]{2,80}?)*(/)?$)|(^[a-z0-9]{2,}$)|(^\\.(/[A-Za-z0-9.\\-_]{2,40}?)*(/)?$)"
    },
    "Asset": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "cw20_token"
          ],
          "properties": {
            "cw20_token": {
              "$ref": "#/definitions/AndrAddr"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "native_token"
          ],
          "properties": {
            "native_token": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
      "type": "string"
    },
    "Expiry": {
      "description": "The Expiry type is used to define an expiry time using milliseconds\n\nThere are two types: 1. FromNow(Milliseconds) - The expiry time is relative to the current time 2. AtTime(Milliseconds) - The expiry time is absolute",
      "oneOf": [
        {
          "type": "object",
          "required": [
            "from_now"
          ],
          "properties": {
            "from_now": {
              "$ref": "#/definitions/Milliseconds"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "at_time"
          ],
          "properties": {
            "at_time": {
              "$ref": "#/definitions/Milliseconds"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Milliseconds": {
      "description": "Represents time in milliseconds.",
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "Recipient": {
      "description": "A simple struct used for inter-contract communication. The struct can be used in two ways:\n\n1. Simply just providing an `AndrAddr` which will treat the communication as a transfer of any related funds 2. Providing an `AndrAddr` and a `Binary` message which will be sent to the contract at the resolved address\n\nThe `Binary` message can be any message that the contract at the resolved address can handle.",
      "type": "object",
      "required": [
        "address"
      ],
      "properties": {
        "address": {
          "$ref": "#/definitions/AndrAddr"
        },
        "ibc_recovery_address": {
          "anyOf": [
            {
              "$ref": "#/definitions/AndrAddr"
            },
            {
              "type": "null"
            }
          ]
        },
        "msg": {
          "anyOf": [
            {
              "$ref": "#/definitions/Binary"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
